DFS - depth first search

* Visit leaf node first, do backtrack and visit other leaf node
* Can do backtrack and do prunning if we don't need to visit all the nodes.
  E.g.> Finding the minimum value
* Performance optimization can be done with memoization.
* For most of the problems, visited information is needed and needs to be updated.
* Can be implemented with recursive function (system stack) and with a user stack.
* Examples> maze, graph traversal, permutation, combination, subset and so on

[Reference code]

#include <stdio.h>
const int MAX_N = 11;
const int INF = 0x7FFFFFFF;

int N;
int min_value;
int visited[MAX_N];
int input[MAX_N];

int get_value(int idx)
{
	int res = 0;

	//Do something with the given idx
	//...

	return res;
}

void dfs(int cur_depth, int depth, int value)
{
	//prunning example
	if(value > min_value)
		return;

	//maximum depth reached
	if(cur_depth == depth)
	{
		if(value < min_value)
			min_value = value;
		return;
	}

	int tmp;
	for(int i=0;i<N;i++)
	{
		if(visited[i]) continue;
		visited[i] = 1;

		tmp = get_value(i);
		dfs(cur_depth+1, depth, value+tmp);

		visited[i] = 0;
	}	
}

int main()
{
	int TC;
	scanf("%d", &TC);

	for(int tc=1;tc<=TC;tc++)
	{
		//initialization
		Answer = 0;
		min_value = INF;

		scanf("%d", &N);
		for(int i=0;i<N;i++)
		{
			scanf("%d", &input[i]);
			visited[i] = 0;
		}

#if 1
		printf("N=%d\n", N);
		for(int i=0;i<N;i++)
		{
			printf("%d ", input[i]);
		}
		printf("\n");
#endif

		dfs(0, N,0);
		Answer = min_value;

		//print the answer
		printf("#%d %d\n", tc, Answer);
	}

	return 0;
}
